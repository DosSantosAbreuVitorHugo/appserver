pipeline {
    agent any

    environment {
        APP_NAME = "rise-app"
        TAR_FILE = "rise-app.tar"
        REMOTE_USER = "vagrant"
        REMOTE_HOST = "192.168.56.122"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${APP_NAME} .
                    """
                }
            }
        }

        stage('Transfer Image to Remote Server') {
            steps {
                sshagent(['ssh']) {
                    sh """
                        docker save ${APP_NAME} -o ${TAR_FILE}
                        scp -o StrictHostKeyChecking=no ${TAR_FILE} ${REMOTE_USER}@${REMOTE_HOST}:/tmp/
                    """
                }
            }
        }

        stage('Provision and Run on Remote') {
            steps {
                sshagent(['ssh']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                        set -e

                        # Install Docker if missing
                        if ! command -v docker &> /dev/null; then
                          sudo apt-get update -y
                          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
                          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                          sudo apt-get update -y
                          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                          sudo usermod -aG docker ${REMOTE_USER}
                          sudo systemctl enable docker
                          sudo systemctl start docker
                        fi

                        # Load the image
                        sudo docker load -i /tmp/${TAR_FILE}

                        # Run EF migrations in a temporary SDK container
                        echo "Running EF Core migrations..."
                        sudo docker run --rm \
                          -v /tmp:/src \
                          -w /src \
                          mcr.microsoft.com/dotnet/sdk:9.0 \
                          bash -c "dotnet tool install --global dotnet-ef && export PATH=\"\$PATH:/root/.dotnet/tools\" && dotnet ef database update --startup-project src/Rise.Server/Rise.Server.csproj --project src/Rise.Persistence/Rise.Persistence.csproj"

                        # Stop and remove any old app container
                        sudo docker stop ${APP_NAME} || true
                        sudo docker rm ${APP_NAME} || true

                        # Start the runtime container
                        sudo docker run -d -p 8080:8080 --name ${APP_NAME} --restart unless-stopped ${APP_NAME}

                        # Ensure node_exporter is running
                        if ! sudo docker ps -q -f name=node_exporter | grep -q .; then
                            sudo docker run -d --name node_exporter --network host --restart unless-stopped prom/node-exporter:latest
                        else
                            echo "node_exporter is already running, skipping..."
                        fi
                        '
                    """
                }
            }
        }
    }
}
