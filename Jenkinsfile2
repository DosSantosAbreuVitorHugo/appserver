pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image from the Dockerfile in this repo
                    sh '''
                        docker build -t rise-app .
                    '''
                }
            }
        }

        stage('Transfer Image to Remote Server') {
            steps {
                sshagent(['ssh']) {
                    sh '''
                        # Save Docker image to a tarball
                        docker save rise-app -o rise-app.tar

                        # Copy the tarball to remote server
                        scp -o StrictHostKeyChecking=no rise-app.tar vagrant@192.168.56.122:/tmp/
                    '''
                }
            }
        }

        stage('Provision and Run on Remote') {
            steps {
                sshagent(['ssh']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no vagrant@192.168.56.122 "
                        set -e

                        # Install Docker if not present
                        if ! command -v docker &> /dev/null; then
                          sudo apt-get update -y
                          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
                          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                          echo \\"deb [arch=\\\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\$(lsb_release -cs) stable\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                          sudo apt-get update -y
                          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                          sudo usermod -aG docker vagrant
                          sudo systemctl enable docker
                          sudo systemctl start docker
                        fi

                        # Load image and run container
                        sudo docker load -i /tmp/rise-app.tar
                        sudo docker stop rise-app || true
                        sudo docker rm rise-app || true
                        sudo docker run -d -p 8080:8080 --name rise-app --restart unless-stopped rise-app

						# Wait a few seconds for app to initialize
						sleep 5

						sudo docker run --rm \
							--network host \
							-v /tmp/rise-app.tar:/tmp/rise-app.tar \
							-v rise-data:/app \
							-w /app \
							mcr.microsoft.com/dotnet/sdk:9.0 \
							bash -c 'dotnet tool install --global dotnet-ef && export PATH=\\$PATH:/root/.dotnet/tools && dotnet ef database update --startup-project src/Rise.Server --project src/Rise.Persistence'

                        # Run node_exporter if not already
						if ! sudo docker ps -q -f name=node_exporter | grep -q .; then
							sudo docker run -d --name node_exporter --network host --restart unless-stopped prom/node-exporter:latest
						else
							echo \\"node_exporter is already running, skipping...\\"
						fi
                        "
                    '''
                }
            }
        }
    }
}
