pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t rise-app ."
                }
            }
        }

        stage('Transfer Image to Remote Server') {
            steps {
                sshagent(['ssh']) {
                    sh """
                        docker save rise-app -o rise-app.tar
                        scp -o StrictHostKeyChecking=no rise-app.tar vagrant@192.168.56.122:/tmp/
                    """
                }
            }
        }

        stage('Provision and Run on Remote') {
            steps {
                sshagent(['ssh']) {
					sh '''
					ssh -o StrictHostKeyChecking=no vagrant@192.168.56.122 << 'ENDSSH'
					set -e

					# Install Docker if missing
					if ! command -v docker &> /dev/null; then
					  sudo apt-get update -y
					  sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
					  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
					  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
					  sudo apt-get update -y
					  sudo apt-get install -y docker-ce docker-ce-cli containerd.io
					  sudo usermod -aG docker vagrant
					  sudo systemctl enable docker
					  sudo systemctl start docker
					fi

					# Load Docker image
					sudo docker load -i /tmp/rise-app.tar

					# Stop old container
					sudo docker stop rise-app || true
					sudo docker rm rise-app || true

					# Run the container
					sudo docker run -d -p 8080:8080 --name rise-app --restart unless-stopped rise-app

					# Run EF Core migrations inside the container
					sudo docker run --rm \
						  -v /tmp:/src \
						  -w /src \
						  mcr.microsoft.com/dotnet/sdk:9.0 \
						  bash -c "dotnet tool install --global dotnet-ef --version 9.0.9 && \
								   export PATH=\$PATH:/root/.dotnet/tools && \
								   dotnet ef database update --startup-project src/Rise.Server/Rise.Server.csproj \
															 --project src/Rise.Persistence/Rise.Persistence.csproj"

					# Ensure node_exporter is running
					if ! sudo docker ps -q -f name=node_exporter | grep -q .; then
						sudo docker run -d --name node_exporter --network host --restart unless-stopped prom/node-exporter:latest
					else
						echo "node_exporter is already running, skipping..."
					fi
					ENDSSH
					'''
                }
            }
        }
    }
}
