pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        docker build -t rise-app .
                    '''
                }
            }
        }

        stage('Transfer Image to Remote Server') {
            steps {
                sshagent(['ssh']) {
                    sh '''
                        # Save Docker image to a tarball
                        docker save rise-app -o rise-app.tar

                        # Copy tarball to remote server
                        scp -o StrictHostKeyChecking=no rise-app.tar vagrant@192.168.56.122:/tmp/
                    '''
                }
            }
        }

        stage('Provision and Run on Remote') {
            steps {
                sshagent(['ssh']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no vagrant@192.168.56.122 "
                        set -e

                        # Install Docker if missing
                        if ! command -v docker &> /dev/null; then
                          sudo apt-get update -y
                          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
                          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                          echo \\"deb [arch=\\\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\$(lsb_release -cs) stable\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                          sudo apt-get update -y
                          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                          sudo usermod -aG docker vagrant
                          sudo systemctl enable docker
                          sudo systemctl start docker
                        fi

                        # Load image and run app container
                        sudo docker load -i /tmp/rise-app.tar
                        sudo docker stop rise-app || true
                        sudo docker rm rise-app || true
                        sudo docker run -d -p 8080:8080 --name rise-app --restart unless-stopped rise-app

                        echo \\"Waiting for app to initialize...\\"
                        sleep 5

                        # Run EF migrations inside the running container
                        echo \\"Running EF Core migrations...\\"
                        sudo docker exec rise-app dotnet ef database update \\
                            --startup-project src/Rise.Server/Rise.Server.csproj \\
                            --project src/Rise.Persistence/Rise.Persistence.csproj || {
                                echo 'Migration failed!' >&2
                                exit 1
                            }

                        # Ensure node_exporter is running
                        if ! sudo docker ps -q -f name=node_exporter | grep -q .; then
                            sudo docker run -d --name node_exporter --network host --restart unless-stopped prom/node-exporter:latest
                        else
                            echo \\"node_exporter is already running, skipping...\\"
                        fi
                        "
                    '''
                }
            }
        }
    }
}
